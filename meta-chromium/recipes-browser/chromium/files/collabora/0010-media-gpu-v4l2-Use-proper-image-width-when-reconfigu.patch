From cf29a90c1796b7a48e08b37de65b87ddb83df83e Mon Sep 17 00:00:00 2001
From: Alexandros Frantzis <alexandros.frantzis@collabora.com>
Date: Mon, 7 Oct 2024 10:54:52 +0300
Subject: [PATCH 10/14] media/gpu/v4l2: Use proper image width when
 reconfiguring the v4l2 encoder

---
 media/gpu/v4l2/v4l2_video_encode_accelerator.cc | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)

diff --git a/media/gpu/v4l2/v4l2_video_encode_accelerator.cc b/media/gpu/v4l2/v4l2_video_encode_accelerator.cc
index e00f33bd4d..0c18896c9c 100644
--- a/media/gpu/v4l2/v4l2_video_encode_accelerator.cc
+++ b/media/gpu/v4l2/v4l2_video_encode_accelerator.cc
@@ -358,7 +358,7 @@ void V4L2VideoEncodeAccelerator::InitializeTask(const Config& config) {
     }
 
     const gfx::Size ip_output_buffer_size(
-        image_processor_->output_config().planes[0].stride,
+        image_processor_->output_config().size.width(),
         image_processor_->output_config().size.height());
     if (!NegotiateInputFormat(device_input_layout_->format(),
                               ip_output_buffer_size)) {
@@ -969,10 +969,11 @@ bool V4L2VideoEncodeAccelerator::ReconfigureFormatIfNeeded(
   } else if (frame.coded_size() == input_frame_size_) {
     // This path is for the first frame on Encode().
     // Height and width that V4L2VEA needs to configure.
-    const gfx::Size buffer_size(frame.stride(0), frame.coded_size().height());
+    const gfx::Size buffer_size(frame.coded_size().width(),
+                                frame.coded_size().height());
 
     // A buffer given by client is allocated with the same dimension using
-    // minigbm. However, it is possible that stride and height are different
+    // minigbm. However, it is possible that width and height are different
     // from ones adjusted by a driver.
     if (!image_processor_) {
       if (device_input_layout_->coded_size().width() == buffer_size.width() &&
@@ -985,8 +986,7 @@ bool V4L2VideoEncodeAccelerator::ReconfigureFormatIfNeeded(
 
     if (image_processor_->input_config().size.height() ==
             buffer_size.height() &&
-        image_processor_->input_config().planes[0].stride ==
-            buffer_size.width()) {
+        image_processor_->input_config().size.width() == buffer_size.width()) {
       return true;
     }
   }
@@ -1004,13 +1004,13 @@ bool V4L2VideoEncodeAccelerator::ReconfigureFormatIfNeeded(
     return false;
   }
 
-  if (gfx::Size(image_processor_->output_config().planes[0].stride,
+  if (gfx::Size(image_processor_->output_config().size.width(),
                 image_processor_->output_config().size.height()) !=
       device_input_layout_->coded_size()) {
     LOG(ERROR) << "Image Processor's output buffer's size is different from "
                << "input buffer size configure to the encoder driver. "
                << "ip's output buffer size: "
-               << gfx::Size(image_processor_->output_config().planes[0].stride,
+               << gfx::Size(image_processor_->output_config().size.width(),
                             image_processor_->output_config().size.height())
                       .ToString()
                << ", encoder's input buffer size: "
@@ -1949,7 +1949,7 @@ bool V4L2VideoEncodeAccelerator::SetFormats(VideoPixelFormat input_format,
         gfx::BufferUsage::VEA_READ_CAMERA_AND_CPU_READ_WRITE);
     if (!input_layout)
       return false;
-    input_size = gfx::Size(input_layout->planes()[0].stride,
+    input_size = gfx::Size(input_layout->coded_size().width(),
                            input_layout->coded_size().height());
   }
 
-- 
2.45.2

