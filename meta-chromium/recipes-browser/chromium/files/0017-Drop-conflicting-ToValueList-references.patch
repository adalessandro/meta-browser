From 2827ad645643b167fee2f1ccbb52e87d755f10ed Mon Sep 17 00:00:00 2001
From: Ariel D'Alessandro <ariel.dalessandro@collabora.com>
Date: Sat, 26 Apr 2025 19:46:32 -0300
Subject: [PATCH] Drop conflicting ToValueList references

Build is failing due to a bad template type inference, not finding the
Append method. It's not clear the cause of this issue, but again, to fix
this easily and fast, let's drop the references that triggers this issue
in our build setup.

| ../../base/containers/to_value_list.h:39:46: error: no matching member function for call to 'Append'

This needs to be reported and submitted upstream properly.

Signed-off-by: Ariel D'Alessandro <ariel.dalessandro@collabora.com>
---
 chrome/browser/extensions/menu_manager.cc     |  13 +-
 .../support_tool/support_tool_ui_utils.cc     |  40 ++-
 .../web_app_internals_handler.cc              | 277 +++++++++++-------
 .../isolated_web_app_integrity_block_data.cc  |  17 +-
 .../isolated_web_app_update_discovery_task.cc |  23 +-
 .../policy/isolated_web_app_policy_manager.cc |  18 +-
 .../app_service/public/cpp/permission.cc      |   7 +-
 printing/print_settings_conversion.cc         | 104 +++----
 8 files changed, 296 insertions(+), 203 deletions(-)

diff --git a/chrome/browser/extensions/menu_manager.cc b/chrome/browser/extensions/menu_manager.cc
index 365f7ff0d9..c697d8b81e 100644
--- a/chrome/browser/extensions/menu_manager.cc
+++ b/chrome/browser/extensions/menu_manager.cc
@@ -11,7 +11,6 @@
 
 #include "base/check_op.h"
 #include "base/containers/contains.h"
-#include "base/containers/to_value_list.h"
 #include "base/functional/bind.h"
 #include "base/json/json_writer.h"
 #include "base/notreached.h"
@@ -99,6 +98,13 @@ MenuItem::OwnedList MenuItemsFromValue(
   return items;
 }
 
+base::Value::List MenuItemsToValue(const MenuItem::List& items) {
+  base::Value::List list;
+  for (const auto* item : items)
+    list.Append(item->ToValue());
+  return list;
+}
+
 bool GetStringList(const base::Value::Dict& dict,
                    const std::string& key,
                    std::vector<std::string>* out) {
@@ -879,9 +885,8 @@ void MenuManager::WriteToStorageInternal(
     observer.WillWriteToStorage(extension_key.extension_id);
 
   if (store_) {
-    store_->SetExtensionValue(
-        extension_key.extension_id, kContextMenusKey,
-        base::Value(base::ToValueList(all_items, &MenuItem::ToValue)));
+    store_->SetExtensionValue(extension_key.extension_id, kContextMenusKey,
+                              base::Value(MenuItemsToValue(all_items)));
   }
 }
 
diff --git a/chrome/browser/ui/webui/support_tool/support_tool_ui_utils.cc b/chrome/browser/ui/webui/support_tool/support_tool_ui_utils.cc
index 39408b5eda..15c8ad5d91 100644
--- a/chrome/browser/ui/webui/support_tool/support_tool_ui_utils.cc
+++ b/chrome/browser/ui/webui/support_tool/support_tool_ui_utils.cc
@@ -14,7 +14,6 @@
 #include "base/base64url.h"
 #include "base/check.h"
 #include "base/containers/contains.h"
-#include "base/containers/to_value_list.h"
 #include "base/strings/string_util.h"
 #include "base/values.h"
 #include "chrome/browser/support_tool/data_collection_module.pb.h"
@@ -228,25 +227,34 @@ std::string GetPIITypeDescription(redaction::PIIType type_enum) {
 // type PIIDataItem = {
 //   piiTypeDescription: string,
 //   piiType: number,
-//   detectedData: List<string>,
+//   detectedData: string,
 //   count: number,
 //   keep: boolean,
 // }
 base::Value::List GetDetectedPIIDataItems(const PIIMap& detected_pii) {
-  return base::ToValueList(detected_pii, [](const auto& detected_pii_entry) {
-    const auto& [pii_key, pii_data] = detected_pii_entry;
-    return base::Value::Dict()
-        .Set(support_tool_ui::kPiiItemDescriptionKey,
-             GetPIITypeDescription(pii_key))
-        .Set(support_tool_ui::kPiiItemPIITypeKey, static_cast<int>(pii_key))
-        .Set(support_tool_ui::kPiiItemDetectedDataKey,
-             base::ToValueList(pii_data))
-        .Set(support_tool_ui::kPiiItemCountKey,
-             static_cast<int>(pii_data.size()))
-        // TODO(b/200511640): Set `keep` field to the value we'll get from
-        // URL's pii_masking_on query if it exists.
-        .Set(support_tool_ui::kPiiItemKeepKey, true);
-  });
+  base::Value::List detected_pii_data_items;
+  for (const auto& pii_entry : detected_pii) {
+    base::Value::Dict pii_data_item;
+    pii_data_item.Set(support_tool_ui::kPiiItemDescriptionKey,
+                      GetPIITypeDescription(pii_entry.first));
+    pii_data_item.Set(support_tool_ui::kPiiItemPIITypeKey,
+                      static_cast<int>(pii_entry.first));
+    pii_data_item.Set(
+        support_tool_ui::kPiiItemDetectedDataKey,
+        base::JoinString(
+            std::vector<std::string_view>(pii_entry.second.begin(),
+                                          pii_entry.second.end()),
+            // Join the PII strings with a comma in between them when displaying
+            // to the user to make it more easily readable.
+            ", "));
+    pii_data_item.Set(support_tool_ui::kPiiItemCountKey,
+                      static_cast<int>(pii_entry.second.size()));
+    // TODO(b/200511640): Set `keep` field to the value we'll get from URL's
+    // pii_masking_on query if it exists.
+    pii_data_item.Set(support_tool_ui::kPiiItemKeepKey, true);
+    detected_pii_data_items.Append(std::move(pii_data_item));
+  }
+  return detected_pii_data_items;
 }
 
 std::set<redaction::PIIType> GetPIITypesToKeep(
diff --git a/chrome/browser/ui/webui/web_app_internals/web_app_internals_handler.cc b/chrome/browser/ui/webui/web_app_internals/web_app_internals_handler.cc
index 08f1122ccb..e5f7814a66 100644
--- a/chrome/browser/ui/webui/web_app_internals/web_app_internals_handler.cc
+++ b/chrome/browser/ui/webui/web_app_internals/web_app_internals_handler.cc
@@ -8,7 +8,6 @@
 #include <string>
 #include <vector>
 
-#include "base/containers/to_value_list.h"
 #include "base/containers/to_vector.h"
 #include "base/files/file_enumerator.h"
 #include "base/files/file_util.h"
@@ -76,33 +75,44 @@ constexpr char kNeedsRecordWebAppDebugInfo[] =
     "No debugging info available! Please enable: "
     "chrome://flags/#record-web-app-debug-info";
 
+template <typename T>
+std::string ConvertToString(const T& value) {
+  std::stringstream ss;
+  ss << value;
+  return ss.str();
+}
+
 base::Value::Dict BuildIndexJson() {
-  return base::Value::Dict().Set(
-      "Index", base::Value::List()
-                   .Append(kInstalledWebApps)
-                   .Append(kPreinstalledWebAppConfigs)
-                   .Append(kUserUninstalledPreinstalledWebAppPrefs)
-                   .Append(kWebAppPreferences)
-                   .Append(kWebAppIphPreferences)
-                   .Append(kWebAppMlPreferences)
-                   .Append(kWebAppIphLcPreferences)
-                   .Append(kShouldGarbageCollectStoragePartitions)
-                   .Append(kLockManager)
-                   .Append(kNavigationCapturing)
-                   .Append(kCommandManager)
-                   .Append(kIconErrorLog)
-                   .Append(kInstallationProcessErrorLog)
+  base::Value::Dict root;
+  base::Value::List& index = *root.EnsureList("Index");
+
+  index.Append(kInstalledWebApps);
+  index.Append(kPreinstalledWebAppConfigs);
+  index.Append(kUserUninstalledPreinstalledWebAppPrefs);
+  index.Append(kWebAppPreferences);
+  index.Append(kWebAppIphPreferences);
+  index.Append(kWebAppMlPreferences);
+  index.Append(kWebAppIphLcPreferences);
+  index.Append(kShouldGarbageCollectStoragePartitions);
+  index.Append(kLockManager);
+  index.Append(kNavigationCapturing);
+  index.Append(kCommandManager);
+  index.Append(kIconErrorLog);
+  index.Append(kInstallationProcessErrorLog);
 #if BUILDFLAG(IS_MAC)
-                   .Append(kAppShimRegistryLocalStorage)
+  index.Append(kAppShimRegistryLocalStorage);
 #endif
-                   .Append(kIsolatedWebAppUpdateManager)
-                   .Append(kIsolatedWebAppPolicyManager)
-                   .Append(kWebAppDirectoryDiskState));
+  index.Append(kIsolatedWebAppUpdateManager);
+  index.Append(kIsolatedWebAppPolicyManager);
+  index.Append(kWebAppDirectoryDiskState);
+
+  return root;
 }
 
 base::Value::Dict BuildInstalledWebAppsJson(web_app::WebAppProvider& provider) {
-  return base::Value::Dict().Set(kInstalledWebApps,
-                                 provider.registrar_unsafe().AsDebugValue());
+  base::Value::Dict root;
+  root.Set(kInstalledWebApps, provider.registrar_unsafe().AsDebugValue());
+  return root;
 }
 
 base::Value::Dict BuildPreinstalledWebAppConfigsJson(
@@ -116,98 +126,136 @@ base::Value::Dict BuildPreinstalledWebAppConfigsJson(
     return root;
   }
 
-  auto config_to_dict = [](const auto& config) {
-    return base::Value::Dict()
-        .Set("!Reason", config.second)
-        .Set("Config", config.first.AsDebugValue());
-  };
+  base::Value::Dict& preinstalled_web_app_configs =
+      *root.EnsureDict(kPreinstalledWebAppConfigs);
 
-  root.Set(
-      kPreinstalledWebAppConfigs,
-      base::Value::Dict()
-          .Set("ConfigParseErrors", base::ToValueList(debug_info->parse_errors))
-          .Set("UninstallConfigs",
-               base::ToValueList(debug_info->uninstall_configs, config_to_dict))
-          .Set("InstallConfigs",
-               base::ToValueList(debug_info->install_configs, config_to_dict))
-          .Set("IgnoreConfigs",
-               base::ToValueList(debug_info->ignore_configs, config_to_dict))
-          .Set("InstallResults",
-               base::ToValueList(
-                   debug_info->install_results,
-                   [](const auto& install_result) {
-                     return base::Value::Dict()
-                         .Set("InstallUrl", install_result.first.spec())
-                         .Set("ResultCode",
-                              base::ToString(install_result.second.code))
-                         .Set("DidUninstallAndReplace",
-                              install_result.second.did_uninstall_and_replace);
-                   }))
-          .Set("IsStartUpTaskComplete", debug_info->is_start_up_task_complete)
-          .Set("UninstallResults",
-               base::ToValueList(
-                   debug_info->uninstall_results,
-                   [](const auto& uninstall_result) {
-                     return base::Value::Dict()
-                         .Set("InstallUrl", uninstall_result.first.spec())
-                         .Set("Success",
-                              base::ToString(uninstall_result.second));
-                   })));
+  base::Value::List& config_parse_errors =
+      *preinstalled_web_app_configs.EnsureList("ConfigParseErrors");
+  for (const std::string& parse_error : debug_info->parse_errors) {
+    config_parse_errors.Append(parse_error);
+  }
+
+  base::Value::List& uninstall_configs =
+      *preinstalled_web_app_configs.EnsureList("UninstallConfigs");
+  for (const std::pair<web_app::ExternalInstallOptions, std::string>&
+           uninstall_config : debug_info->uninstall_configs) {
+    base::Value::Dict entry;
+    entry.Set("!Reason", uninstall_config.second);
+    entry.Set("Config", uninstall_config.first.AsDebugValue());
+    uninstall_configs.Append(std::move(entry));
+  }
+
+  base::Value::List& install_configs =
+      *preinstalled_web_app_configs.EnsureList("InstallConfigs");
+  for (const std::pair<web_app::ExternalInstallOptions, std::string>&
+           install_config : debug_info->install_configs) {
+    base::Value::Dict entry;
+    entry.Set("!Reason", install_config.second);
+    entry.Set("Config", install_config.first.AsDebugValue());
+    install_configs.Append(std::move(entry));
+  }
+
+  base::Value::List& ignore_configs =
+      *preinstalled_web_app_configs.EnsureList("IgnoreConfigs");
+  for (const std::pair<web_app::ExternalInstallOptions, std::string>&
+           ignore_config : debug_info->ignore_configs) {
+    base::Value::Dict entry;
+    entry.Set("!Reason", ignore_config.second);
+    entry.Set("Config", ignore_config.first.AsDebugValue());
+    ignore_configs.Append(std::move(entry));
+  }
+
+  base::Value::List& install_results =
+      *preinstalled_web_app_configs.EnsureList("InstallResults");
+  for (std::pair<const GURL&,
+                 const web_app::ExternallyManagedAppManager::InstallResult&>
+           install_result : debug_info->install_results) {
+    base::Value::Dict entry;
+    entry.Set("InstallUrl", install_result.first.spec());
+    entry.Set("ResultCode", ConvertToString(install_result.second.code));
+    entry.Set("DidUninstallAndReplace",
+              install_result.second.did_uninstall_and_replace);
+    install_results.Append(std::move(entry));
+  }
+
+  preinstalled_web_app_configs.Set("IsStartUpTaskComplete",
+                                   debug_info->is_start_up_task_complete);
+
+  base::Value::List& uninstall_results =
+      *preinstalled_web_app_configs.EnsureList("UninstallResults");
+  for (std::pair<const GURL&, webapps::UninstallResultCode> uninstall_result :
+       debug_info->uninstall_results) {
+    base::Value::Dict entry;
+    entry.Set("InstallUrl", uninstall_result.first.spec());
+    entry.Set("Success", base::ToString(uninstall_result.second));
+    uninstall_results.Append(std::move(entry));
+  }
 
   return root;
 }
 
 base::Value::Dict BuildUserUninstalledPreinstalledWebAppPrefsJson(
     Profile* profile) {
-  return base::Value::Dict().Set(
-      kUserUninstalledPreinstalledWebAppPrefs,
-      profile->GetPrefs()
-          ->GetDict(prefs::kUserUninstalledPreinstalledWebAppPref)
-          .Clone());
+  base::Value::Dict root;
+  root.Set(kUserUninstalledPreinstalledWebAppPrefs,
+           profile->GetPrefs()
+               ->GetDict(prefs::kUserUninstalledPreinstalledWebAppPref)
+               .Clone());
+  return root;
 }
 
 base::Value::Dict BuildWebAppsPrefsJson(Profile* profile) {
-  return base::Value::Dict().Set(
-      kWebAppPreferences,
-      profile->GetPrefs()->GetDict(prefs::kWebAppsPreferences).Clone());
+  base::Value::Dict root;
+  root.Set(kWebAppPreferences,
+           profile->GetPrefs()->GetDict(prefs::kWebAppsPreferences).Clone());
+  return root;
 }
 
 base::Value::Dict BuildWebAppIphPrefsJson(Profile* profile) {
-  return base::Value::Dict().Set(
+  base::Value::Dict root;
+  root.Set(
       kWebAppIphPreferences,
       profile->GetPrefs()->GetDict(prefs::kWebAppsAppAgnosticIphState).Clone());
+  return root;
 }
 
 base::Value::Dict BuildWebAppMlPrefsJson(Profile* profile) {
-  return base::Value::Dict().Set(
+  base::Value::Dict root;
+  root.Set(
       kWebAppMlPreferences,
       profile->GetPrefs()->GetDict(prefs::kWebAppsAppAgnosticMlState).Clone());
+  return root;
 }
 
 base::Value::Dict BuildWebAppLinkCapturingIphPrefsJson(Profile* profile) {
-  return base::Value::Dict().Set(
-      kWebAppIphLcPreferences,
-      profile->GetPrefs()
-          ->GetDict(prefs::kWebAppsAppAgnosticIPHLinkCapturingState)
-          .Clone());
+  base::Value::Dict root;
+  root.Set(kWebAppIphLcPreferences,
+           profile->GetPrefs()
+               ->GetDict(prefs::kWebAppsAppAgnosticIPHLinkCapturingState)
+               .Clone());
+  return root;
 }
 
 base::Value::Dict BuildShouldGarbageCollectStoragePartitionsPrefsJson(
     Profile* profile) {
-  return base::Value::Dict().Set(
-      kShouldGarbageCollectStoragePartitions,
-      profile->GetPrefs()->GetBoolean(
-          prefs::kShouldGarbageCollectStoragePartitions));
+  base::Value::Dict root;
+  root.Set(kShouldGarbageCollectStoragePartitions,
+           profile->GetPrefs()->GetBoolean(
+               prefs::kShouldGarbageCollectStoragePartitions));
+  return root;
 }
 
 base::Value::Dict BuildLockManagerJson(web_app::WebAppProvider& provider) {
-  return base::Value::Dict().Set(
-      kLockManager, provider.command_manager().lock_manager().ToDebugValue());
+  base::Value::Dict root;
+  root.Set(kLockManager,
+           provider.command_manager().lock_manager().ToDebugValue());
+  return root;
 }
 
 base::Value::Dict BuildCommandManagerJson(web_app::WebAppProvider& provider) {
-  return base::Value::Dict().Set(kCommandManager,
-                                 provider.command_manager().ToDebugValue());
+  base::Value::Dict root;
+  root.Set(kCommandManager, provider.command_manager().ToDebugValue());
+  return root;
 }
 
 base::Value::Dict BuildIconErrorLogJson(web_app::WebAppProvider& provider) {
@@ -221,7 +269,10 @@ base::Value::Dict BuildIconErrorLogJson(web_app::WebAppProvider& provider) {
     return root;
   }
 
-  root.Set(kIconErrorLog, base::ToValueList(*error_log));
+  base::Value::List& icon_error_log = *root.EnsureList(kIconErrorLog);
+  for (const std::string& error : *error_log) {
+    icon_error_log.Append(error);
+  }
 
   return root;
 }
@@ -238,16 +289,21 @@ base::Value::Dict BuildInstallProcessErrorLogJson(
     return root;
   }
 
-  root.Set(kInstallationProcessErrorLog,
-           base::ToValueList(*error_log, &base::Value::Clone));
+  base::Value::List& installation_process_error_log =
+      *root.EnsureList(kInstallationProcessErrorLog);
+  for (const base::Value& error : *error_log) {
+    installation_process_error_log.Append(error.Clone());
+  }
 
   return root;
 }
 
 #if BUILDFLAG(IS_MAC)
 base::Value::Dict BuildAppShimRegistryLocalStorageJson() {
-  return base::Value::Dict().Set(kAppShimRegistryLocalStorage,
-                                 AppShimRegistry::Get()->AsDebugDict().Clone());
+  base::Value::Dict root;
+  root.Set(kAppShimRegistryLocalStorage,
+           AppShimRegistry::Get()->AsDebugDict().Clone());
+  return root;
 }
 #endif
 
@@ -303,15 +359,17 @@ base::Value BuildWebAppDiskStateJson(base::FilePath root_directory,
   base::Value::Dict contents;
   BuildDirectoryState(root_directory, &contents);
 
-  root.Append(
-      base::Value::Dict().Set(kWebAppDirectoryDiskState, std::move(contents)));
+  base::Value::Dict section;
+  section.Set(kWebAppDirectoryDiskState, std::move(contents));
+  root.Append(std::move(section));
   return base::Value(std::move(root));
 }
 
 base::Value::Dict BuildNavigationCapturingLog(
     web_app::WebAppProvider& provider) {
-  return base::Value::Dict().Set(kNavigationCapturing,
-                                 provider.navigation_capturing_log().GetLog());
+  base::Value::Dict root;
+  root.Set(kNavigationCapturing, provider.navigation_capturing_log().GetLog());
+  return root;
 }
 
 }  // namespace
@@ -322,28 +380,27 @@ void WebAppInternalsHandler::BuildDebugInfo(
     base::OnceCallback<void(base::Value root)> callback) {
   auto* provider = web_app::WebAppProvider::GetForLocalAppsUnchecked(profile);
 
-  base::Value::List root =
-      base::Value::List()
-          .Append(BuildIndexJson())
-          .Append(BuildInstalledWebAppsJson(*provider))
-          .Append(BuildPreinstalledWebAppConfigsJson(*provider))
-          .Append(BuildUserUninstalledPreinstalledWebAppPrefsJson(profile))
-          .Append(BuildWebAppsPrefsJson(profile))
-          .Append(BuildWebAppIphPrefsJson(profile))
-          .Append(BuildWebAppMlPrefsJson(profile))
-          .Append(BuildWebAppLinkCapturingIphPrefsJson(profile))
-          .Append(BuildShouldGarbageCollectStoragePartitionsPrefsJson(profile))
-          .Append(BuildLockManagerJson(*provider))
-          .Append(BuildNavigationCapturingLog(*provider))
-          .Append(BuildCommandManagerJson(*provider))
-          .Append(BuildIconErrorLogJson(*provider))
-          .Append(BuildInstallProcessErrorLogJson(*provider))
+  base::Value::List root;
+  root.Append(BuildIndexJson());
+  root.Append(BuildInstalledWebAppsJson(*provider));
+  root.Append(BuildPreinstalledWebAppConfigsJson(*provider));
+  root.Append(BuildUserUninstalledPreinstalledWebAppPrefsJson(profile));
+  root.Append(BuildWebAppsPrefsJson(profile));
+  root.Append(BuildWebAppIphPrefsJson(profile));
+  root.Append(BuildWebAppMlPrefsJson(profile));
+  root.Append(BuildWebAppLinkCapturingIphPrefsJson(profile));
+  root.Append(BuildShouldGarbageCollectStoragePartitionsPrefsJson(profile));
+  root.Append(BuildLockManagerJson(*provider));
+  root.Append(BuildNavigationCapturingLog(*provider));
+  root.Append(BuildCommandManagerJson(*provider));
+  root.Append(BuildIconErrorLogJson(*provider));
+  root.Append(BuildInstallProcessErrorLogJson(*provider));
 #if BUILDFLAG(IS_MAC)
-          .Append(BuildAppShimRegistryLocalStorageJson())
+  root.Append(BuildAppShimRegistryLocalStorageJson());
 #endif
-          .Append(BuildIsolatedWebAppUpdaterManagerJson(*provider))
-          .Append(BuildIsolatedWebAppPolicyManagerJson(*provider))
-          .Append(BuildIwaKeyDistributionInfoProviderJson());
+  root.Append(BuildIsolatedWebAppUpdaterManagerJson(*provider));
+  root.Append(BuildIsolatedWebAppPolicyManagerJson(*provider));
+  root.Append(BuildIwaKeyDistributionInfoProviderJson());
   base::ThreadPool::PostTaskAndReplyWithResult(
       FROM_HERE, {base::TaskPriority::USER_VISIBLE, base::MayBlock()},
       base::BindOnce(&BuildWebAppDiskStateJson,
diff --git a/chrome/browser/web_applications/isolated_web_apps/isolated_web_app_integrity_block_data.cc b/chrome/browser/web_applications/isolated_web_apps/isolated_web_app_integrity_block_data.cc
index 25134a3ddc..a638752f86 100644
--- a/chrome/browser/web_applications/isolated_web_apps/isolated_web_app_integrity_block_data.cc
+++ b/chrome/browser/web_applications/isolated_web_apps/isolated_web_app_integrity_block_data.cc
@@ -155,9 +155,11 @@ IsolatedWebAppIntegrityBlockData::ToProto() const {
 }
 
 base::Value IsolatedWebAppIntegrityBlockData::AsDebugValue() const {
-  return base::Value(base::Value::Dict().Set(
-      "signatures", base::ToValueList(signatures_, [](const auto& signature) {
-        return absl::visit(
+
+  base::Value::List list;
+  for (const auto& signature : signatures_) {
+    list.Append(
+	absl::visit(
             base::Overloaded{
                 [](const web_package::SignedWebBundleSignatureInfoEd25519&
                        signature_info) {
@@ -189,8 +191,13 @@ base::Value IsolatedWebAppIntegrityBlockData::AsDebugValue() const {
                   return base::Value::Dict().Set("unknown",
                                                  base::Value::Dict());
                 }},
-            signature);
-      })));
+            signature)
+      );
+    }
+
+  return base::Value(base::Value::Dict().Set(
+      "signatures", std::move(list)
+  ));
 }
 
 bool IsolatedWebAppIntegrityBlockData::HasPublicKey(
diff --git a/chrome/browser/web_applications/isolated_web_apps/isolated_web_app_update_discovery_task.cc b/chrome/browser/web_applications/isolated_web_apps/isolated_web_app_update_discovery_task.cc
index e6901c8942..84ba76c2f1 100644
--- a/chrome/browser/web_applications/isolated_web_apps/isolated_web_app_update_discovery_task.cc
+++ b/chrome/browser/web_applications/isolated_web_apps/isolated_web_app_update_discovery_task.cc
@@ -12,7 +12,6 @@
 
 #include "base/containers/contains.h"
 #include "base/containers/span.h"
-#include "base/containers/to_value_list.h"
 #include "base/containers/to_vector.h"
 #include "base/files/file_path.h"
 #include "base/files/file_util.h"
@@ -234,17 +233,19 @@ void IsolatedWebAppUpdateDiscoveryTask::OnUpdateManifestFetched(
     return;
   }
 
-  debug_log_.Set(
-      "available_versions",
-      base::ToValueList(update_manifest.versions(), [](const auto& entry) {
-        return base::Value::Dict()
+  base::Value::List available_versions;
+  for (const auto& entry : update_manifest.versions()) {
+    base::Value::List update_channels;
+    for (const auto& channel : entry.channels()) {
+      update_channels.Append(channel.ToString());
+    }
+    available_versions.Append(
+        base::Value::Dict()
             .Set("version", entry.version().GetString())
-            .Set("update_channels",
-                 base::ToValueList(entry.channels(), [](const auto& channel) {
-                   return channel.ToString();
-                 }));
-      }));
-
+            .Set("update_channels", std::move(update_channels))
+    );
+  }
+  debug_log_.Set("available_versions", std::move(available_versions));
   debug_log_.Set(
       "version_entry",
       base::Value::Dict()
diff --git a/chrome/browser/web_applications/isolated_web_apps/policy/isolated_web_app_policy_manager.cc b/chrome/browser/web_applications/isolated_web_apps/policy/isolated_web_app_policy_manager.cc
index c7f0241376..c5089bc97c 100644
--- a/chrome/browser/web_applications/isolated_web_apps/policy/isolated_web_app_policy_manager.cc
+++ b/chrome/browser/web_applications/isolated_web_apps/policy/isolated_web_app_policy_manager.cc
@@ -18,7 +18,6 @@
 #include "base/check_is_test.h"
 #include "base/containers/contains.h"
 #include "base/containers/map_util.h"
-#include "base/containers/to_value_list.h"
 #include "base/feature_list.h"
 #include "base/files/file_util.h"
 #include "base/functional/bind.h"
@@ -67,6 +66,15 @@ namespace web_app {
 
 namespace {
 
+template <typename Range, typename Proj = std::identity>
+base::Value::List ToList(const Range& items, Proj proj = {}) {
+  base::Value::List list;
+  for (const auto& item : items) {
+    list.Append(std::invoke(proj, item));
+  }
+  return list;
+}
+
 constexpr net::BackoffEntry::Policy kInstallRetryBackoffPolicy = {
     .num_errors_to_ignore = 0,
     .initial_delay_ms = 60 * 1000,
@@ -448,17 +456,17 @@ void IsolatedWebAppPolicyManager::DoProcessPolicy(
   }
 
   debug_info.Set("apps_in_policy",
-                 base::ToValueList(apps_in_policy, [](const auto& options) {
+                 ToList(apps_in_policy, [](const auto& options) {
                    return base::ToString(options.web_bundle_id());
                  }));
   debug_info.Set(
       "installed_iwas",
-      base::ToValueList(installed_iwas, [](const auto& installed_iwa) {
+      ToList(installed_iwas, [](const auto& installed_iwa) {
         const auto& [web_bundle_id, _] = installed_iwa;
         return base::ToString(web_bundle_id);
       }));
   debug_info.Set(
-      "app_actions", base::ToValueList(app_actions, [](const auto& entry) {
+      "app_actions", ToList(app_actions, [](const auto& entry) {
         const auto& [web_bundle_id, app_action] = entry;
         return base::Value::Dict()
             .Set("web_bundle_id", base::ToString(web_bundle_id))
@@ -652,7 +660,7 @@ void IsolatedWebAppPolicyManager::ProcessLogs::AppendCompletedStep(
 }
 
 base::Value IsolatedWebAppPolicyManager::ProcessLogs::ToDebugValue() const {
-  return base::Value(base::ToValueList(logs_, &base::Value::Dict::Clone));
+  return base::Value(ToList(logs_, &base::Value::Dict::Clone));
 }
 
 }  // namespace web_app
diff --git a/components/services/app_service/public/cpp/permission.cc b/components/services/app_service/public/cpp/permission.cc
index ee82c80f96..cc5c816784 100644
--- a/components/services/app_service/public/cpp/permission.cc
+++ b/components/services/app_service/public/cpp/permission.cc
@@ -6,7 +6,6 @@
 
 #include <sstream>
 
-#include "base/containers/to_value_list.h"
 #include "base/strings/to_string.h"
 #include "third_party/abseil-cpp/absl/types/variant.h"
 
@@ -167,7 +166,11 @@ PermissionPtr ConvertDictToPermission(const base::Value::Dict& dict) {
 }
 
 base::Value::List ConvertPermissionsToList(const Permissions& permissions) {
-  return base::ToValueList(permissions, &ConvertPermissionToDict);
+  base::Value::List list;
+  for (const auto& permission : permissions) {
+    list.Append(ConvertPermissionToDict(permission));
+  }
+  return list;
 }
 
 Permissions ConvertListToPermissions(const base::Value::List* list) {
diff --git a/printing/print_settings_conversion.cc b/printing/print_settings_conversion.cc
index 974fc61a20..72cd440be7 100644
--- a/printing/print_settings_conversion.cc
+++ b/printing/print_settings_conversion.cc
@@ -16,7 +16,6 @@
 
 #include "base/containers/contains.h"
 #include "base/containers/fixed_flat_set.h"
-#include "base/containers/to_value_list.h"
 #include "base/strings/string_number_conversions.h"
 #include "base/strings/utf_string_conversions.h"
 #include "base/time/time.h"
@@ -57,29 +56,32 @@ PageMargins GetCustomMarginsFromJobSettings(const base::Value::Dict& settings) {
 void SetMarginsToJobSettings(const std::string& json_path,
                              const PageMargins& margins,
                              base::Value::Dict& job_settings) {
-  job_settings.Set(json_path, base::Value::Dict()
-                                  .Set(kSettingMarginTop, margins.top)
-                                  .Set(kSettingMarginBottom, margins.bottom)
-                                  .Set(kSettingMarginLeft, margins.left)
-                                  .Set(kSettingMarginRight, margins.right));
+  base::Value::Dict dict;
+  dict.Set(kSettingMarginTop, margins.top);
+  dict.Set(kSettingMarginBottom, margins.bottom);
+  dict.Set(kSettingMarginLeft, margins.left);
+  dict.Set(kSettingMarginRight, margins.right);
+  job_settings.Set(json_path, std::move(dict));
 }
 
 void SetSizeToJobSettings(const std::string& json_path,
                           const gfx::Size& size,
                           base::Value::Dict& job_settings) {
-  job_settings.Set(json_path, base::Value::Dict()
-                                  .Set("width", size.width())
-                                  .Set("height", size.height()));
+  base::Value::Dict dict;
+  dict.Set("width", size.width());
+  dict.Set("height", size.height());
+  job_settings.Set(json_path, std::move(dict));
 }
 
 void SetRectToJobSettings(const std::string& json_path,
                           const gfx::Rect& rect,
                           base::Value::Dict& job_settings) {
-  job_settings.Set(json_path, base::Value::Dict()
-                                  .Set("x", rect.x())
-                                  .Set("y", rect.y())
-                                  .Set("width", rect.width())
-                                  .Set("height", rect.height()));
+  base::Value::Dict dict;
+  dict.Set("x", rect.x());
+  dict.Set("y", rect.y());
+  dict.Set("width", rect.width());
+  dict.Set("height", rect.height());
+  job_settings.Set(json_path, std::move(dict));
 }
 
 void SetPrintableAreaIfValid(PrintSettings& settings,
@@ -345,47 +347,49 @@ std::unique_ptr<PrintSettings> PrintSettingsFromJobSettings(
 
 base::Value::Dict PrintSettingsToJobSettingsDebug(
     const PrintSettings& settings) {
-  auto job_settings =
-      base::Value::Dict()
-          .Set(kSettingHeaderFooterEnabled, settings.display_header_footer())
-          .Set(kSettingHeaderFooterTitle, settings.title())
-          .Set(kSettingHeaderFooterURL, settings.url())
-          .Set(kSettingShouldPrintBackgrounds,
-               settings.should_print_backgrounds())
-          .Set(kSettingShouldPrintSelectionOnly, settings.selection_only())
-          .Set(kSettingMarginsType, static_cast<int>(settings.margin_type()))
-          .Set(kSettingCollate, settings.collate())
-          .Set(kSettingCopies, settings.copies())
-          .Set(kSettingColor, static_cast<int>(settings.color()))
-          .Set(kSettingDuplexMode, static_cast<int>(settings.duplex_mode()))
-          .Set(kSettingLandscape, settings.landscape())
-          .Set(kSettingDeviceName, settings.device_name())
-          .Set(kSettingDpiHorizontal, settings.dpi_horizontal())
-          .Set(kSettingDpiVertical, settings.dpi_vertical())
-          .Set(kSettingScaleFactor,
-               static_cast<int>((settings.scale_factor() * 100.0) + 0.5))
-          .Set(kSettingRasterizePdf, settings.rasterize_pdf())
-          .Set(kSettingPagesPerSheet, settings.pages_per_sheet());
-
+  base::Value::Dict job_settings;
+
+  job_settings.Set(kSettingHeaderFooterEnabled,
+                   settings.display_header_footer());
+  job_settings.Set(kSettingHeaderFooterTitle, settings.title());
+  job_settings.Set(kSettingHeaderFooterURL, settings.url());
+  job_settings.Set(kSettingShouldPrintBackgrounds,
+                   settings.should_print_backgrounds());
+  job_settings.Set(kSettingShouldPrintSelectionOnly, settings.selection_only());
+  job_settings.Set(kSettingMarginsType,
+                   static_cast<int>(settings.margin_type()));
   if (!settings.ranges().empty()) {
-    job_settings.Set(
-        kSettingPageRange,
-        base::ToValueList(settings.ranges(), [](const auto& range) {
-          return base::Value::Dict()
-              .Set(kSettingPageRangeFrom, static_cast<int>(range.from + 1))
-              .Set(kSettingPageRangeTo, static_cast<int>(range.to + 1));
-        }));
+    base::Value::List page_range_array;
+    for (const auto& range : settings.ranges()) {
+      base::Value::Dict dict;
+      dict.Set(kSettingPageRangeFrom, static_cast<int>(range.from + 1));
+      dict.Set(kSettingPageRangeTo, static_cast<int>(range.to + 1));
+      page_range_array.Append(std::move(dict));
+    }
+    job_settings.Set(kSettingPageRange, std::move(page_range_array));
   }
 
+  job_settings.Set(kSettingCollate, settings.collate());
+  job_settings.Set(kSettingCopies, settings.copies());
+  job_settings.Set(kSettingColor, static_cast<int>(settings.color()));
+  job_settings.Set(kSettingDuplexMode,
+                   static_cast<int>(settings.duplex_mode()));
+  job_settings.Set(kSettingLandscape, settings.landscape());
+  job_settings.Set(kSettingDeviceName, settings.device_name());
+  job_settings.Set(kSettingDpiHorizontal, settings.dpi_horizontal());
+  job_settings.Set(kSettingDpiVertical, settings.dpi_vertical());
+  job_settings.Set(kSettingScaleFactor,
+                   static_cast<int>((settings.scale_factor() * 100.0) + 0.5));
+  job_settings.Set(kSettingRasterizePdf, settings.rasterize_pdf());
+  job_settings.Set(kSettingPagesPerSheet, settings.pages_per_sheet());
+
   // Following values are not read form JSON by InitSettings, so do not have
   // common public constants. So just serialize in "debug" section.
-  auto debug =
-      base::Value::Dict()
-          .Set("dpi", settings.dpi())
-          .Set("deviceUnitsPerInch", settings.device_units_per_inch())
-          .Set("support_alpha_blend", settings.should_print_backgrounds())
-          .Set("media_vendor_id", settings.requested_media().vendor_id);
-
+  base::Value::Dict debug;
+  debug.Set("dpi", settings.dpi());
+  debug.Set("deviceUnitsPerInch", settings.device_units_per_inch());
+  debug.Set("support_alpha_blend", settings.should_print_backgrounds());
+  debug.Set("media_vendor_id", settings.requested_media().vendor_id);
   SetSizeToJobSettings("media_size", settings.requested_media().size_microns,
                        debug);
   SetMarginsToJobSettings("requested_custom_margins_in_points",
