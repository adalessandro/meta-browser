From fea26970a2339ad199bdb78883e46f3cb8ad6ec6 Mon Sep 17 00:00:00 2001
From: Ariel D'Alessandro <ariel.dalessandro@collabora.com>
Date: Fri, 2 May 2025 11:19:24 -0300
Subject: [PATCH] base: to_value_list: Move value instead of forwarding

For some (not clear) reason, in this clang version the template
expansion for Value::List, some classes end up with an lvalue in the
Append() call. Let's force it by using std::move instead of
std::forward.

| In file included from ../../components/services/app_service/public/cpp/permission.cc:10:
| ../../base/containers/to_value_list.h:39:46: error: no matching member function for call to 'Append'
|    39 |       [&]<typename T>(T&& value) { container.Append(std::forward<T>(value)); },
[...]
| ../../base/values.h:162:8: note: candidate function not viable: expects an rvalue for 1st argument
|   162 |   void Append(DictValue&& value) &;

Signed-off-by: Ariel D'Alessandro <ariel.dalessandro@collabora.com>
---
 base/containers/to_value_list.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/base/containers/to_value_list.h b/base/containers/to_value_list.h
index 643ccd015b..01735ae80b 100644
--- a/base/containers/to_value_list.h
+++ b/base/containers/to_value_list.h
@@ -36,7 +36,7 @@ Value::List ToValueList(Range&& range, Proj proj = {}) {
   auto container = Value::List::with_capacity(std::ranges::size(range));
   std::ranges::for_each(
       std::forward<Range>(range),
-      [&]<typename T>(T&& value) { container.Append(std::forward<T>(value)); },
+      [&]<typename T>(T&& value) { container.Append(std::move(value)); },
       std::move(proj));
   return container;
 }
